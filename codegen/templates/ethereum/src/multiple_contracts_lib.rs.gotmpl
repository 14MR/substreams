mod abi;
mod pb;
use hex_literal::hex;
use pb::contract::v1 as contract;
use substreams::Hex;
use substreams_database_change::pb::database::DatabaseChanges;
use substreams_ethereum::pb::eth::v2 as eth;
use substreams_ethereum::Event;

#[allow(unused_imports)]
use num_traits::cast::ToPrimitive;

substreams_ethereum::init!();

{{- range $i, $contract := .ethereumContracts }}
const {{ toUpper $contract.Name }}_TRACKED_CONTRACT: [u8; 20] = hex!("{{ $contract.Address }}");
{{- end}}

{{ range $i, $contract := .ethereumContracts }}
fn map_{{ $contract.Name }}_events(blk: &eth::Block, events: &mut contract::Events) {
    {{- range $event := $contract.Events }}
    {{- $rust := $event.Rust }}
    events.{{ $contract.Name }}_{{ $rust.ProtoOutputModuleFieldName }}.append(&mut blk
        .receipts()
        .flat_map(|view| {
            view.receipt.logs.iter()
                .filter(|log| log.address == {{ toUpper $contract.Name }}_TRACKED_CONTRACT)
                .filter_map(|log| {
                    if let Some(event) = abi::{{ if eq len .ethereumContracts 1 }}contract{{ else }}{{ $contract.Name }}_contract{{ end }}::events::{{$rust.ABIStructName}}::match_and_decode(log) {
                        return Some(contract::{{ capitalizeFirst $contract.Name }}{{$rust.ProtoMessageName}} {
                            evt_tx_hash: Hex(&view.transaction.hash).to_string(),
                            evt_index: log.block_index,
                            evt_block_time: Some(blk.timestamp().to_owned()),
                            evt_block_number: blk.number,
                            {{- range $protoField, $abiToProtoConversion := $rust.ProtoFieldABIConversionMap }}
                            {{$protoField}}: {{$abiToProtoConversion}},
                            {{- end}}
                        });
                    }

                    None
            })
        })
        .collect());
    {{- end }}
}
{{ end }}

#[substreams::handlers::map]
fn map_events(blk: eth::Block) -> Result<contract::Events, substreams::errors::Error> {
    let mut events = contract::Events::default();
    {{- range $i, $contract := .ethereumContracts }}
    map_{{ $contract.Name }}_events(&blk, &mut events);
    {{- end }}
    Ok(events)
}
