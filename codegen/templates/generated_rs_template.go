package templates

const LibRsTemplate = `// CODE GENERATED BY SUBSTREAMS. DO NOT EDIT.
{{$engine := .}}

use substreams::errors::Error;
use substreams::prelude::*;

pub trait SubstreamTrait {
	{{- range $engine.Package.Modules.Modules}}
		{{- $module := .}}
		{{- with ($engine.FunctionSignature $module)}}
			{{- $functionSignature := .}}
			{{- if eq $functionSignature.Type "map"}}
				{{- template "mapFunctionTrait" $functionSignature}}
			{{- else if eq $functionSignature.Type "store"}}
				{{- template "storeFunctionTrait" $functionSignature}}
			{{- end}}
		{{- end}}
	{{- end}}
}

pub struct Substreams {}

{{- range $engine.Package.Modules.Modules}}
	{{- $module := .}}
	{{- with ($engine.ExternFunctionSignature $module)}}
		{{- $functionSignature := .}}
		{{- if eq $functionSignature.Type "map"}}
			{{- template "externMapFunction" $functionSignature}}
		{{- else if eq $functionSignature.Type "store"}}
			{{- template "externStoreFunction" $functionSignature}}
		{{- end}}
	{{- end}}
{{- end}}

{{define "mapFunctionTrait"}}
	fn {{.Name}}(
	{{- range $key, $value := .InputParams}}
		{{- range $input, $inputVal := $value}}
		{{$key}}: {{$inputVal.Type}},
		{{- end}}
	{{- end}}
	) -> Result<{{.OutputType}}, Error> {
		unimplemented!()		
	}
{{end}}

{{define "storeFunctionTrait"}}
	fn {{.Name}}(
	{{- range $key, $value := .InputParams}}
		{{- range $input, $inputVal := $value}}
		{{$key}}: {{$inputVal.Type}},
		{{- end}}
	{{- end}}
	) {
		unimplemented!()		
	}
{{end}}

{{define "externMapFunction"}}
#[no_mangle]
pub extern "C" fn {{.Name}}(
{{- range $key, $value := .InputParams}}
	{{- range $input, $inputVal := $value}}
		{{$key}}: {{$inputVal.Type}},
		{{- end}}
{{- end}}
) {
	substreams::register_panic_hook();
	let func = || -> Result<{{.OutputType}}, Error> {
		
    };
    let result = func();
}
{{end -}}

{{define "externStoreFunction"}}
#[no_mangle]
pub extern "C" fn {{.Name}}(
{{- range $key, $value := .InputParams}}
	{{- range $input, $inputVal := $value}}
		{{$key}}: {{$inputVal.Type}},
		{{- end}}
{{- end}}
) {
	substreams::register_panic_hook();
	todo!()
}
{{end -}}
`

//{{- with ($engine.Arguments $module)}}
//		{{- $arguments}}
//        let block: substreams_ethereum::pb::eth::v2::Block =
//            substreams::proto::decode_ptr(block_ptr, block_len).unwrap();
//        {
//			{{- with ($engine.ExternFunctionSignature $module)}}
//            Substreams::{{.Name}}(
//				$vars
//			)
//			{{- end}}
//        }
//		{{- end}}
