{{$engine := . -}}
use substreams::prelude::*;
use substreams::errors::Error;
use crate::pb;
use crate::generated::substreams::{Substreams, SubstreamsTrait};

{{range $engine.Package.Modules.Modules -}}
{{$module := . -}}
{{$functionSignature := $engine.FunctionSignature $module}}
#[no_mangle]
pub extern "C" fn {{$functionSignature.Name}}(
{{- range $i, $value := $functionSignature.Arguments}}
    {{- if ne $value.ModuleInput.GetStore nil }}
        {{- if isDelta $value.ModuleInput}}
            {{$value.Name}}_deltas_ptr: *mut u8,
            {{$value.Name}}_deltas_len: usize,
        {{else}}
            {{$value.Name}}_ptr: u32,
        {{end}}
    {{- else}}
    {{$value.Name}}_ptr: *mut u8,
    {{$value.Name}}_len: usize,
    {{- end -}}
    {{- end }}
) {
    substreams::register_panic_hook();
    let func = || {{- if eq $module.GetKindStore nil}}-> Result<{{$functionSignature.OutputType}}, Error>{{end -}} {
        {{if ne $module.GetKindStore nil -}}{{/* This is the store for a store module*/}}
        {{writableStoreDeclaration $module.GetKindStore }}
        {{end -}}

        {{ range $id, $argument := $functionSignature.Arguments }}
            {{- if eq $argument.ModuleInput.GetStore nil }}
        let {{$argument.Name}}: {{$argument.Type}} = substreams::proto::decode_ptr({{$argument.Name}}_ptr, {{$argument.Name}}_len).unwrap();
            {{- else}}
            {{- $m := $engine.MustModule $argument.Name }}
        {{readableStoreDeclaration $argument.Name $m.GetKindStore $argument.ModuleInput.GetStore}}
            {{end -}}
        {{end }}

        Substreams::{{.Name}}(
        {{- range $id, $argument := $functionSignature.Arguments}}
            {{- if isDelta $argument.ModuleInput }}{{/* delta mode */}}
            {{$argument.Name}}_deltas,
            {{- else}}
            {{$argument.Name}},
            {{end -}}
        {{end}}
        {{- if ne $module.GetKindStore nil}}
            store,
        {{end -}}
        )
    };

    {{- if ne $module.GetKindStore nil}}
        func()
    {{else}}
    let result = func();
    if result.is_err() {
        panic!("{:?}", &result.err().unwrap());
    }
    substreams::output(result.unwrap());
    {{end}}
}
{{end -}}