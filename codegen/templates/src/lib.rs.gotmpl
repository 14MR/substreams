// Generated file DO NOT EDIT directly. Running the Go tests will automatically erase that file,
// take great care in development. Usual flow is to test something in the `lib.rs` and port it
// where needed.
{{$engine := . -}}
mod abi;
mod pb;
use hex_literal::hex;
#[allow(unused_imports)]
use num_traits::ToPrimitive;
use pb::contract;
use serde_json::json;
use substreams::Hex;
use substreams_ethereum::pb::eth::v2 as eth;
use substreams_ethereum::Event;

const TRACKED_CONTRACT: [u8; 20] = hex!("{{$engine.ProjectContract}}");

substreams_ethereum::init!();

#[substreams::handlers::map]
fn map_all_events(blk: eth::Block) -> Result<contract::Event, substreams::errors::Error> {
    Ok(contract::Event {
        events: blk
            .receipts()
            .flat_map(|view| {
                view.receipt.logs.iter().filter_map(|log| {
                    if log.address != TRACKED_CONTRACT {
                        return None;
                    }

                    {{- range $engine.ProjectEvents }}
                    if let Some(event) = abi::contract::events::{{.RustName}}::match_and_decode(log) {
                        return Some(
                            json!({
                                "block_number": blk.number,
                                "block_hash": Hex(&blk.hash).to_string(),
                                "trx_hash": Hex(&view.transaction.hash).to_string(),
                                "log_index": log.block_index,
                                "event_name": abi::contract::events::{{.RustName}}::NAME,
                                {{- range $key, $access := .Fields }}
                                "{{$key}}": {{$access}},
                                {{- end}}
                            })
                            .to_string()
                            .into_bytes(),
                        );
                    }
                    {{- end}}

                    None
                })
            })
            .collect(),
    })
}
