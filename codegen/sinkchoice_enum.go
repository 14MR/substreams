// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package codegen

import (
	"fmt"
	"strings"
)

const (
	// SinkChoiceNo is a SinkChoice of type No.
	SinkChoiceNo SinkChoice = iota
	// SinkChoiceDb is a SinkChoice of type Db.
	SinkChoiceDb
	// SinkChoiceGraph is a SinkChoice of type Graph.
	SinkChoiceGraph
)

var ErrInvalidSinkChoice = fmt.Errorf("not a valid SinkChoice, try [%s]", strings.Join(_SinkChoiceNames, ", "))

const _SinkChoiceName = "NoDbGraph"

var _SinkChoiceNames = []string{
	_SinkChoiceName[0:2],
	_SinkChoiceName[2:4],
	_SinkChoiceName[4:9],
}

// SinkChoiceNames returns a list of possible string values of SinkChoice.
func SinkChoiceNames() []string {
	tmp := make([]string, len(_SinkChoiceNames))
	copy(tmp, _SinkChoiceNames)
	return tmp
}

var _SinkChoiceMap = map[SinkChoice]string{
	SinkChoiceNo:    _SinkChoiceName[0:2],
	SinkChoiceDb:    _SinkChoiceName[2:4],
	SinkChoiceGraph: _SinkChoiceName[4:9],
}

// String implements the Stringer interface.
func (x SinkChoice) String() string {
	if str, ok := _SinkChoiceMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SinkChoice(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SinkChoice) IsValid() bool {
	_, ok := _SinkChoiceMap[x]
	return ok
}

var _SinkChoiceValue = map[string]SinkChoice{
	_SinkChoiceName[0:2]:                  SinkChoiceNo,
	strings.ToLower(_SinkChoiceName[0:2]): SinkChoiceNo,
	_SinkChoiceName[2:4]:                  SinkChoiceDb,
	strings.ToLower(_SinkChoiceName[2:4]): SinkChoiceDb,
	_SinkChoiceName[4:9]:                  SinkChoiceGraph,
	strings.ToLower(_SinkChoiceName[4:9]): SinkChoiceGraph,
}

// ParseSinkChoice attempts to convert a string to a SinkChoice.
func ParseSinkChoice(name string) (SinkChoice, error) {
	if x, ok := _SinkChoiceValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _SinkChoiceValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return SinkChoice(0), fmt.Errorf("%s is %w", name, ErrInvalidSinkChoice)
}

// MarshalText implements the text marshaller method.
func (x SinkChoice) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *SinkChoice) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseSinkChoice(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
