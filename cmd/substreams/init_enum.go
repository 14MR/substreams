// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package main

import (
	"fmt"
	"strings"
)

const (
	// ProtocolEthereum is a SupportedProtocol of type Ethereum.
	ProtocolEthereum SupportedProtocol = iota
	// ProtocolOther is a SupportedProtocol of type Other.
	ProtocolOther
)

var ErrInvalidSupportedProtocol = fmt.Errorf("not a valid SupportedProtocol, try [%s]", strings.Join(_SupportedProtocolNames, ", "))

const _SupportedProtocolName = "EthereumOther"

var _SupportedProtocolNames = []string{
	_SupportedProtocolName[0:8],
	_SupportedProtocolName[8:13],
}

// SupportedProtocolNames returns a list of possible string values of SupportedProtocol.
func SupportedProtocolNames() []string {
	tmp := make([]string, len(_SupportedProtocolNames))
	copy(tmp, _SupportedProtocolNames)
	return tmp
}

var _SupportedProtocolMap = map[SupportedProtocol]string{
	ProtocolEthereum: _SupportedProtocolName[0:8],
	ProtocolOther:    _SupportedProtocolName[8:13],
}

// String implements the Stringer interface.
func (x SupportedProtocol) String() string {
	if str, ok := _SupportedProtocolMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SupportedProtocol(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SupportedProtocol) IsValid() bool {
	_, ok := _SupportedProtocolMap[x]
	return ok
}

var _SupportedProtocolValue = map[string]SupportedProtocol{
	_SupportedProtocolName[0:8]:                   ProtocolEthereum,
	strings.ToLower(_SupportedProtocolName[0:8]):  ProtocolEthereum,
	_SupportedProtocolName[8:13]:                  ProtocolOther,
	strings.ToLower(_SupportedProtocolName[8:13]): ProtocolOther,
}

// ParseSupportedProtocol attempts to convert a string to a SupportedProtocol.
func ParseSupportedProtocol(name string) (SupportedProtocol, error) {
	if x, ok := _SupportedProtocolValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _SupportedProtocolValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return SupportedProtocol(0), fmt.Errorf("%s is %w", name, ErrInvalidSupportedProtocol)
}

// MarshalText implements the text marshaller method.
func (x SupportedProtocol) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *SupportedProtocol) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseSupportedProtocol(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
